// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/pichayaearn/loan-management/pkg/customer/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CustomerService is an autogenerated mock type for the CustomerService type
type CustomerService struct {
	mock.Mock
}

// Create provides a mock function with given fields: opts
func (_m *CustomerService) Create(opts model.CreateCustomerOpts) error {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.CreateCustomerOpts) error); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: customerID, ctx
func (_m *CustomerService) GetByID(customerID uuid.UUID, ctx context.Context) (*model.Customer, error) {
	ret := _m.Called(customerID, ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, context.Context) (*model.Customer, error)); ok {
		return rf(customerID, ctx)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, context.Context) *model.Customer); ok {
		r0 = rf(customerID, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, context.Context) error); ok {
		r1 = rf(customerID, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: opts
func (_m *CustomerService) Update(opts model.UpdateCustomerOpts) error {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.UpdateCustomerOpts) error); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCustomerService creates a new instance of CustomerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerService {
	mock := &CustomerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
